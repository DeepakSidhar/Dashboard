import logging
import nvdlib #(Donato, 2025)
import  datetime
import psycopg2 # (Vishal, 2018)

#set up logger
logging.basicConfig(
        format='[%(asctime)s] %(levelname)s: %(message)s',
        level=logging.INFO,
        filename='cve-scaner.log',
        encoding='utf-8'
    )
#Add logging to console also
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
logging.getLogger().addHandler(console_handler)
logger = logging.getLogger()
API_KEY = 'eb1fd457-a957-419d-a6ed-e8aab63bad85' # api key is access NVD

try:
    conn = psycopg2.connect("dbname=dashboard_db user=postgres password=postgres1 host=localhost port=5433")
# Open a cursor to perform database operations
    cur = conn.cursor()
except (Exception, psycopg2.Error) as error:
    logger.error("Error while connecting to PostgreSQL", error)


def main():
    last_week = datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=7) #This is calvulating the time time different
    vulnerabilities = fetch_vulnerabilities(last_week) # This is using the calulation and fetching the vulnerabilityes
    insert_into_database(vulnerabilities) #  This inserts the vulnerabilities into the database

def fetch_vulnerabilities(since: datetime.datetime):
    vulnerabilities = []

    logger.info(f"Fetching CVEs since {since}")
    results = nvdlib.searchCVE(limit=10,key=API_KEY) # using the nvdlib to get the list of vulnerabilities this limited to 10 currently and needs to be increased

#this is filering the data returned to ensure we only include cve_id, published_date, last_modified_date, description, severity, cvss_score, vendor, product, version)
    for cve in results:
        if not hasattr(cve, 'configurations'):
            continue

        for config in cve.configurations:
            for node in config.nodes:
                if not hasattr(node, 'cpeMatch'):
                    continue

                for cpe_match in node.cpeMatch:
                    cpe_uri = cpe_match.criteria
                    cpe_parts = cpe_uri.split(':')
                    if len(cpe_parts) < 6:
                        continue
                    vendor = cpe_parts[3]
                    product = cpe_parts[4]
                    version = cpe_parts[5]
                    descriptions = cve.descriptions[0].value if cve.descriptions else None
                    severity = cve.score[2] if len(cve.score) >= 3 else None
                    cvss_score = cve.score[1]  if len(cve.score) >= 3 else None
                    vulnerabilities.append(
                        (cve.id, cve.published, cve.lastModified, descriptions, severity, cvss_score, vendor, product, version)
                    )
    return vulnerabilities

def insert_into_database(vulnerabilities):
    insert_query = """
        INSERT INTO public.vulnerability(
        cve_id, published_date, last_modified_date, description, severity, cvss_score, vendor, product, version)
        VALUES (%s, %s, %s, %s, %s, %s,%s, %s, %s)
        ON CONFLICT (cve_id) DO NOTHING 
    """

    # Execute a query
    cur.executemany(insert_query, vulnerabilities)
    conn.commit()
    cur.close()
    conn.close()




if __name__ == '__main__':
    main()